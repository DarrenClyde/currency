{"version":3,"sources":["components/Spinner/spin.svg","helpers/formatCurrency.js","helpers/getErrorMessage.js","components/CurrencyBox/CurrencyBox.js","components/Title/Title.js","components/Spinner/Spinner.js","containers/HomePage/HomePage.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","formatCurrency","currenciesObj","currenciesArray","key","push","value","info","getErrorMessage","message","CurrencyBox","currencies","onSelect","useState","setValue","isFocus","toggleFocus","className","placeholder","onFocus","onBlur","onChange","target","filter","elem","toLowerCase","includes","map","currency","pre","Date","getTime","onMouseDown","defaultProps","Title","type","children","Spinner","src","spin","alt","HomePage","currenciesList","setCurrencyList","baseValue","setBaseValue","secondaryValue","setSecondaryValue","rates","setRates","isLoading","setIsLoading","error","setError","useEffect","axios","get","then","response","data","err","console","handleBaseCheck","base","a","secondary","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.930f032b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spin.24b07114.svg\";","const formatCurrency = currenciesObj => {\n  const currenciesArray = [];\n  for (let key in currenciesObj) {\n    currenciesArray.push({ value: key, info: currenciesObj[key] });\n  }\n  return currenciesArray;\n};\n\nexport default formatCurrency;\n","const getErrorMessage = message => {\n  switch(message) {\n    case \"not_allowed\":\n      return \"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ API –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ USD. üòû\";\n    default:\n      return \"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\";\n  }\n}\n\nexport default getErrorMessage;","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport \"./styles.css\";\n\nconst generateKey = pre => {\n  return `${pre}_${new Date().getTime()}`;\n};\n\nconst CurrencyBox = ({ currencies, onSelect }) => {\n  const [value, setValue] = useState(\"\");\n  const [isFocus, toggleFocus] = useState(false);\n\n  return (\n    <div className=\"currencyBoxContent\">\n      <input\n        placeholder=\"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã\"\n        className=\"textInput\"\n        onFocus={() => toggleFocus(true)}\n        onBlur={() => toggleFocus(false)}\n        onChange={({ target: { value } }) => setValue(value)}\n        value={value}\n      />\n      {isFocus && (\n        <div className=\"listContainer\">\n          <ul className=\"list\">\n            {currencies.filter(elem => elem.value.toLowerCase().includes(value.toLowerCase())).map(currency => (\n              <li\n                key={generateKey(currency.value)}\n                className=\"item\"\n                onMouseDown={() => {\n                  onSelect(currency);\n                  setValue(currency.value)\n                  toggleFocus(false);\n                }}\n              >\n                {currency.value} - {currency.info}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nCurrencyBox.propTypes = {\n  currencies: PropTypes.array,\n  onSelect: PropTypes.func.isRequired,\n}\n\nCurrencyBox.defaultProps = {\n  currencies: [],\n}\n\nexport default CurrencyBox;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Title = ({ type, children }) => {\n  switch(type) {\n    case \"h2\":\n      return <h2>{children}</h2>\n    case \"h3\":\n      return <h3>{children}</h3>\n    case \"h4\":\n      return <h4>{children}</h4>\n    case \"h5\":\n      return <h5>{children}</h5>\n    default:\n      return <h1>{children}</h1>\n  }\n}\n\nTitle.propTypes = {\n  type: PropTypes.string,\n  children: PropTypes.string.isRequired,\n}\n\nTitle.defaultProps = {\n  currencies: [],\n}\n\nexport default Title;","import React from \"react\";\nimport spin from \"./spin.svg\";\nimport \"./styles.css\";\n\nconst Spinner = () => (\n  <div className=\"spin\">\n    <img src={spin} alt=\"–ó–∞–≥—Ä—É–∑–∫–∞\"/>\n  </div>\n);\n\nexport default Spinner;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { APP_ID } from \"../../config\";\nimport { formatCurrency, getErrorMessage } from \"../../helpers\";\nimport CurrencyBox from \"../../components/CurrencyBox\";\nimport Title from \"../../components/Title\";\nimport Spinner from \"../../components/Spinner\";\nimport \"./styles.css\";\n\nconst HomePage = () => {\n  const [currenciesList, setCurrencyList] = useState([]);\n  const [baseValue, setBaseValue] = useState(null);\n  const [secondaryValue, setSecondaryValue] = useState(null);\n  const [rates, setRates] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    try {\n      axios\n        .get(\"https://openexchangerates.org/api/currencies.json\")\n        .then(response => {\n          setCurrencyList(formatCurrency(response.data));\n        });\n      setIsLoading(false);\n    } catch (err) {\n      setIsLoading(false);\n      setError(err);\n      console.error(err);\n    }\n  }, []);\n\n  const handleBaseCheck = async base => {\n    setIsLoading(true);\n    setBaseValue(base);\n    setRates(null);\n    try {\n      const response = await axios.get(\n        `https://openexchangerates.org/api/latest.json?app_id=${APP_ID}&base=${base.value}`\n      );\n      setError(null);\n      setRates(response.data.rates);\n      setIsLoading(false);\n    } catch (err) {\n      setError(err.response.data.message);\n      setIsLoading(false);\n      throw err;\n    }\n  };\n\n  const renderInfo = () => (\n    <>\n      {error && <div className=\"error\">{getErrorMessage(error)}</div>}\n      {rates && baseValue && secondaryValue ? (\n        <div className=\"info\">\n          <span className=\"price\">1</span> {baseValue.value} ={\" \"}\n          <span className=\"price\">{rates[secondaryValue.value]}</span>{\" \"}\n          {secondaryValue.value}\n        </div>\n      ) : (\n        <div className=\"info\">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã, –∞ —è –ø–æ–∫–∞–∂—É –≤–∞–º —Å–≤–µ–∂–∏–π –∫—É—Ä—Å.</div>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <Title>–í–∞–ª—é—Ç–∞—Ç–æ—Ä</Title>\n      <div className=\"box\">\n        <div className=\"container\">\n          <div className=\"currencyBox\">\n            <CurrencyBox\n              currencies={currenciesList}\n              onSelect={base => handleBaseCheck(base)}\n            />\n          </div>\n          <div className=\"currencyBox\">\n            <CurrencyBox\n              currencies={currenciesList}\n              onSelect={secondary => setSecondaryValue(secondary)}\n            />\n          </div>\n        </div>\n        {isLoading ? <Spinner /> : renderInfo()}\n      </div>\n    </>\n  );\n};\n\nexport default HomePage;\n","const APP_ID = \"b48b722a813446db82ba3221b1fc309d\";\n\nexport { APP_ID };","import React from \"react\";\nimport HomePage from \"./containers/HomePage\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}